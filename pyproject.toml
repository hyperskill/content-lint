[tool.poetry]
name = "content-lint"
version = "0.3.2"
description = ""
authors = ["Hyperskill Team"]
readme = "README.md"
packages = [{include = "content_lint"}]

[tool.poetry.dependencies]
python = "^3.11"
beautifulsoup4 = "^4.12.2"
cssutils = "^2.7.1"
lxml = "^4.9.3"
pillow = "^10.0.0"
requests = "^2.31.0"
structlog = "^23.1.0"
svgelements = "^1.9.5"


[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
mypy = "^1.4.1"
pytest = "^7.4.0"
ruff = "^0.0.277"
types-requests = "^2.31.0.1"
responses = "^0.23.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "C90",
    "COM",
    "D",
    "DJ",
    "DTZ",
    "E",
    "E111",
    "E112",
    "E113",
    "E114",
    "E115",
    "E116",
    "E117",
    "E201",
    "E202",
    "E211",
    "E221",
    "E222",
    "E223",
    "E224",
    "E225",
    "E226",
    "E227",
    "E228",
    "E231",
    "E251",
    "E252",
    "E261",
    "E262",
    "E265",
    "E266",
    "E271",
    "E272",
    "E273",
    "E274",
    "E275",
    "ERA",
    "EXE",
    "F",
    "G",
    "I",
    "ICN",
    "INP",
    "INT",
    "ISC",
    "N",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PLC1901",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "T10",
    "T20",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN401",
    "COM812",
    "D100",
    "D101",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "EXE002",
    "N806",
    "S101",
    "SIM108",
    "TRY003",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 88
target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "django.utils.decorators.classonlymethod",
    "django.utils.functional.classproperty"
]

[tool.ruff.pylint]
max-args = 6
max-branches = 9
max-returns = 45
max-statements = 19

[tool.ruff.isort]
combine-as-imports = true
known-third-party = ["elasticsearch"]
order-by-type = false
required-imports = ["from __future__ import annotations"]

[tool.black]
line-length = 88
target-version = ['py311']
skip-string-normalization = true

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
explicit_package_bases = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--strict-markers --doctest-modules"
python_files = [
    "tests.py",
    "test_*.py"
]
norecursedirs = [
    ".git",
    ".idea",
    "node_modules",
    "out",
]
